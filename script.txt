slide 1: the three major sources I have chosen to mention are the computer langauge benchmark game, SOK: secure data deletion and pyGTK,PyQT,Tkinter and WxPython 
comparison
slide 2: - Firstly we have the computer language benchmark game
		 - website which runs same tests in each language
		 - shows test speed,cpu usage and memory usage]
		 - Quantify language performance
		 
slide 3: - secure data deletion gave indepth explanation of topic
		 - informed further research 
		 - most methods unused
		 
slide 4: - showed important areas to focus on
		 - helped identify good frameworks
		 
slide 5: - Now onto the design section

slide 6: - this is a diagram showing my architecture
slide 7: - the architecture works much like a star lan
		 - the server acts as a switchboard, sending messages on 
		 - None of the clients rely on eachother to operate
		 - The clients only know eachothers usernames, nothing else
		 
slide 8: - this is my use case for client server communication
slide 9: - this is my use case for the client user communication
from these i created my flow charts
slide 10: - this is the flow chart for the client which consists of two major loops 
slide 11: - first is the UI which controls user access to the system
slide 12: - the second loop is the recieve loop which recieves messages from the server 
both of these loops occur in (relative) parallel 
slide 13:Next is the server flow chart 
slide 14: Now onto my erd 
slide 15: the idea of the project is to store as little data as possible
		  - data is only stored when neccessary 
		  - less tables means less management of integrity 
slide 16: - this is my project plan, it is divided into sprints, in the same idea as scrum 
slide 17: - sprint six is reserved for polish and testing 
		  - each sprint lasts 2 weeks, but time has been left to adjust this
slide 18: - this is the end of my presentation, so we can move onto the demo 



DEMO SCRIPT
- launch server
- Launch 2 clients 
- sign first client in 
- sign second client in wrong
- sign second client in correctly
- send messages from each 
- close client 1 
- send message again from client 2
- create a group with client 2 
- show group change 
